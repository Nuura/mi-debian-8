#! /bin/bash
#
# Copyright (c) 2012 Joyent Inc., All rights reserved.
#
# Script that will prepare image to have a dataset made out of it

# load common functions and vars
. /lib/smartdc/lib_smartdc_scripts.cfg

# initilize warning string
WARNING=""

# set this to 1 to skip zeroing disk
NO_ZERO_DISK=1

addwarn() {
  WARNING="${WARNING}(warning) $@\n"
}

warn() {
  printf "(warn) %s\n" "$@"
}

separator() {
  for i in {1..78} ; do
    printf "="
  done
  printf "\n"
}

cleanup_logs() {
  lib_smartdc_info "cleaning up logs"
  find /var/log -type f | xargs rm -f

  # create wtmp - this solves an issue where syslog would not start
  # with out wtmp being created 
  touch /var/log/wtmp
  chmod 664 /var/log/wtmp
}

zero_disks() {
  if [ $NO_ZERO_DISK == 1 ]; then
     lib_smartdc_info "Skipping zeroing disks"
  else
    SWAP_DISK=`grep swap /etc/fstab | sed -r 's/\s+/:/g' | cut -d: -f1 2> /dev/null`
    TMP_DISK=`grep tmp /etc/fstab | sed -r 's/\s+/:/g' | cut -d: -f1 2> /dev/null`

    if [[ ! -b $SWAP_DISK ]]; then
       addwarn "No swap disk found at $SWAP_DISK. Make sure /etc/fstab uses /dev/vda# for swap and not UUID"
       addwarn "This needs to be resolved before you make an image"
    fi

    if [[ ! -b $TMP_DISK ]]; then
       addwarn "No tmp disk found at $TMP_DISK. Make sure /etc/fstab uses /dev/vda# for tmp and not UUID"
       addwarn "This needs to be resolved before you make an image"
    fi

    SFILL=`which sfill 2> /dev/null`

    if [[ ! -f $SFILL ]]; then
       addwarn "Can not zero /. Need to install secure-delete"
       addwarn "This needs to be resolved before you make an image"
    fi

    SWAPOFF=`which swapoff 2> /dev/null`
    SWAPON=`which swapon 2> /dev/null`
    UMOUNT=`which umount 2> /dev/null`

    MKSWAP=`which mkswap 2> /dev/null`
    MKE2FS=`which mke2fs 2> /dev/null`

    DD=`which dd 2> /dev/null`
    TUNE2FS=`which tune2fs 2> /dev/null`
    DF=`which df 2> /dev/null`
    CHMOD=`which chmod 2> /dev/null`

    if [[ -b $SWAP_DISK ]]; then
       lib_smartdc_info "Disabling swap disk $SWAP_DISK"
       $SWAPOFF $SWAP_DISK &> /dev/null
       lib_smartdc_info "Zeroing swap disk $SWAP_DISK ( this will take about 5 min )"
       $DD if=/dev/zero of=$SWAP_DISK &> /dev/null
       lib_smartdc_info "Formatting swap disk $SWAP_DISK ( this will take about 5 min )"
       $MKSWAP $SWAP_DISK &> /dev/null
       $SWAPON $SWAP_DISK
       if [[ ! $? == 0 ]]; then
          addwarn "Looks like swap disk $SWAP_DISK did not mount after being zeroed"
          addwarn "You need to manually mount swap disk $SWAP_DISK and resolve the issue"
       fi 
       local out=`grep $SWAP_DISK /proc/swaps`
       if [[ -z $out ]]; then
          addwarn "Looks like swap disk $SWAP_DISK did not mount after being zeroed"
          addwarn "You need to manually mount swap disk $SWAP_DISK and resolve the issue"
       fi
    fi

    if [[ -b $TMP_DISK ]]; then
       lib_smartdc_info "Unmounting /tmp disk $TMP_DISK ( this will take about 3 min )"
       $UMOUNT $TMP_DISK &> /dev/null
       lib_smartdc_info "Zeroing /tmp disk $TMP_DISK ( this will take about 3 min )"
       $DD if=/dev/zero of=$TMP_DISK &> /dev/null
       lib_smartdc_info "Formatting /tmp disk $TMP_DISK ( this will take about 3 min )"
       $MKE2FS -t ext2 -L TMP $TMP_DISK &> /dev/null
       lib_smartdc_info "setting reserved blocks to 0.25% on $TMP_DISK"
       $TUNE2FS -m 0.25 $TMP_DISK &>/dev/null
       lib_smartdc_info "setting auto fsck to 6 months on $TMP_DISK"
       $TUNE2FS -c 0 -i 6m $TMP_DISK &>/dev/null
       lib_smartdc_info "mounting /tmp to $TMP_DISK"
       $MOUNT_BIN /tmp
       if [ ! $? == 0 ]; then
          addwarn "Looks like /tmp did not mount after being zeroed"
          addwarn "You need to manually mount /tmp and resolve the issue"
       fi 
       # one more check to make sure /tmp is mounted
       # reason is if there are any issues then dataset
       # will hang on provisioning
       local out=`$DF -h | grep $TMP_DISK`
       if [[ -z $out ]]; then
          addwarn "Looks like /tmp did not mount after being zeroed"
          addwarn "You need to manually mount /tmp and resolve the issue"
       fi
       $CHMOD 1777 /tmp
       lib_smartdc_info "setting permissions for /tmp to 1777"
    fi

    if [[ -f $SFILL ]]; then
       lib_smartdc_info "Zeroing empty space on / ( this will take about 10 min )"
       $SFILL -fllz / &> /dev/null
    fi
  fi
}

cleanup_lock_files() {
  # makes sure locak file is not in place on provisioning
  lib_smartdc_info "cleaning up lock files"
  rm -f /root/.uscript.lock
}

cleanup_root() {
  lib_smartdc_info "cleaning up root account"
  rm -f /root/.bash_history
  history -c
  history -w
  rm -f /root/.bash_history
  history -c
  history -w
  rm -f /root/.bash_history
  rm -f /root/.lesshst
  rm -f /root/.viminfo

  local passwd=$(grep ^root: /etc/shadow- | awk -F ':' '{print $2}')
  if [[ -n $passwd ]] ; then
    addwarn "root user has a password set. This is a potential vulnerability"
    addwarn "consider removing the password with 'passwd -d root'."
  fi

  local passwd=$(grep ^root: /etc/shadow | awk -F ':' '{print $2}')
  if [[ -n $passwd ]] ; then
    addwarn "root user has a password set. This is a potential vulnerability"
    addwarn "consider removing the password with 'passwd -d root'."
  fi
}

cleanup_other_users() {
  lib_smartdc_info "cleaning up other user account"

  # looks for list of users that should not be on system
  USERLIST='jasun joyent'
  FILELIST='passwd passwd- shadow shadow-'
  for user in $USERLIST; do
     for file in $FILELIST; do
        local passwd=$(grep "^${user}:" /etc/${file} | awk -F ':' '{print $2}')
        if [[ -n $passwd ]] ; then
          lib_smartdc_info "$user user exist in /etc/${file}. This is a potential vulnerability"
          lib_smartdc_fatal "Need to remove $user user."
        fi
     done

     if [[ -d "/home/$user" ]] ; then
       lib_smartdc_info "/home/$user exist. This is a potential vulnerability"
       lib_smartdc_fatal "Need to remove /home/$user."
     fi
   
     GROUPFILELIST='gshadow gshadow- group' 
     for groupfile in $GROUPFILELIST; do
        out=$(grep $user /etc/${groupfile} | wc -l)
        if [ $out -ne 0 ]; then
           addwarn "$user user exist /etc/${groupfile}. This is a potential vulnerability and user should be removed."
        fi 
     done
  done

  # check for passwors set for any other user
  local USERLIST=$(grep -E "^[[:alpha:]]+:[^\*\!\:]" /etc/shadow | awk -F ':' '{print $1}')
  for user in $USERLIST; do
    addwarn "$user user exist with password set in /etc/shadow. This is a potential vulnerability"
  done

  local USERLIST=$(grep -E "^[[:alpha:]]+:[^\*\!\:]" /etc/shadow- | awk -F ':' '{print $1}')
  for user in $USERLIST; do
    addwarn "$user user exist with password set. This is a potential vulnerability"
  done
}

cleanup_ssh() {
  lib_smartdc_info "cleaning up ssh"
  find /etc/ssh -type f -name "ssh_host_*" | xargs rm -f    

  # remove /root/.ssh files
  # if you need these files on provisioning please use config management 
  FILELIST='authorized_keys known_hosts id_dsa id_dsa.pub id_rsa id_rsa.pub ssh_config'
  for FILE in $FILELIST; do
     if [ -f "/root/.ssh/$FILE" ]; then
        rm -r /root/.ssh/$FILE
     fi
  done 
}

cleanup_disks() {
  lib_smartdc_info "removing /dev/vdb entries from fstab"
  sed -i '/^\/dev\/vdb/d' /etc/fstab
}

cleanup_metadata() {
  lib_smartdc_info "cleaning up meta data"
  rm -f /root/user-script
  rm -f /root/user-data
}

cleanup_hostname() {
  lib_smartdc_info "removing hostname"
  echo "" > /etc/hostname
}

check_kernel_data() {
  # check to make sure that only one kernel is installed
  # this saves space for provisioning and only one kernel
  # is needed
  lib_smartdc_info "checking module dir"
  MODULE_DIR_NUM=`ls /lib/modules | wc -l`
  if [ $MODULE_DIR_NUM -gt 1 ]; then
    addwarn "Looks like there are $MODULE_DIR_NUM dir in /lib/modules. You should really only have one kernel installed"
    addwarn "This saves space and makes for smaller datasets."
  fi

  KERNEL_NUM=`ls /boot/vmlinuz* | wc -l`
  if [ $KERNEL_NUM -gt 1 ]; then
    addwarn "Looks like there are $KERNEL_NUM kernels installed in /boot. You should really only have one kernel installed"
    addwarn "This saves space and makes for smaller datasets."
  fi
}

# Redhat / CentOS specific commands go here
prepare_redhat() {
  lib_smartdc_info "cleaning up network devices"
  
  rm -f /etc/udev/rules.d/70-persistent-net.rules
  find /etc/sysconfig/network-scripts -name "ifcfg-eth*" | xargs rm -f
  find /var/lib/dhclient -type f | xargs rm -f 

  lib_smartdc_info "cleaning up package cache"
  out=$(yum clean packages)
  
  if [[ -z `which arping` ]] ; then
    addwarn "arping not found!"
    addwarn "to install arping run 'yum install arping'"
  fi

  if [[ -z `which lsb_release` ]] ; then
    addwarn "lsb_release not found!"
    addwarn "To install lsb_release run 'yum install redhat-lsb'.";
  fi

  if [[ -z `which sfill` ]]; then
       addwarn "Can not zero disks. Need to install secure-delete"
       addwarn "To install secure-delete run 'yum install secure-delete'.";
       addwarn "This needs to be resolved before you make an image"
  fi

  local rpmbin=$(which rpm 2>/dev/null)
  if [[ -e ${rpmbin} ]] ; then
    out=$($rpmbin -qa acpid)
    if [[ -z ${out} ]]; then
      addwarn "ACPID not found. Lifecycle management will be degraded!"
      addwarn "To install acpid run 'yum install acpid'."
    fi
  fi

}

# Debian / Ubuntu specific commands go here
prepare_debian() {
  lib_smartdc_info "cleaning up network devices"
  if [[ -f /etc/udev/rules.d/70-persistent-net.rules ]] ; then
    rm -f /etc/udev/rules.d/70-persistent-net.rules
  fi 

  if [[ -d /var/lib/dhcp3 ]] ; then 
    find /var/lib/dhcp3 -type f -name "*.leases" | xargs rm -f
  elif [[ -d /var/lib/dhcp ]] ; then
    find /var/lib/dhcp -type f -name "*.leases" | xargs rm -f
  fi

  if [[ -f /etc/network/interfaces ]] ; then
    rm -f /etc/network/interfaces
    out=$(dpkg-reconfigure ifupdown 2>&1 > /dev/null)
    echo "" >> /etc/network/interfaces
    echo "auto eth0" >> /etc/network/interfaces
    echo "iface eth0 inet dhcp" >> /etc/network/interfaces
    echo "auto eth1" >> /etc/network/interfaces
    echo "iface eth1 inet dhcp" >> /etc/network/interfaces
  fi
  
  lib_smartdc_info "cleaning up package cache"
  out=$(apt-get -qq clean 2>&1 > /dev/null)
  rm -rf /var/lib/apt/lists
  rm -rf /var/cache/apt/*
  rm -rf /usr/src/*
  rm -rf /var/cache/debconf/*
  mkdir -p /var/cache/apt/archives

  if [[ -z `which arping` ]] ; then
    addwarn "arping not found!"
    addwarn "to install arping run 'apt-get install arping'."
  fi
  
  if [[ -z `which sfill` ]]; then
       addwarn "Can not zero disks. Need to install secure-delete"
       addwarn "To install secure-delete run 'apt-get install secure-delete'.";
       addwarn "This needs to be resolved before you make an image"
  fi

  local dpkgbin=$(which dpkg 2>/dev/null)
  if [[ -e ${dpkgbin} ]] ; then
    out=$($dpkgbin -l acpid | grep ^ii | wc -l)
    if [[ ${out} == "0" ]]; then
      addwarn "ACPID not found. Lifecycle management will be degraded!"
      addwarn "To install acpid run 'apt-get install acpid'."
    fi
  fi

  if [ ! -e /proc/acpi/event ] ; then
    addwarn "Acpi-support not handling in /proc, acpid handler does not exists at /proc/acpi/event"
  fi

  if [ ! -f /etc/acpi/events/powerbtn-acpi-support ] ; then
    addwarn "Acpi-support not handling power button, acpid handler does not exists at /etc/acpi/events/powerbtn-acpi-support"
  fi

  # make sure logging is enabled for acpid
  out=$(grep "^OPTIONS=" /etc/default/acpid | cut -d "=" -f2 | grep "\-\-logevents" | wc -l)
  if [[ ${out} -eq 0 ]]; then
    addwarn "ACPID logging is not enabled in /etc/default/acpid"
    addwarn "this should be enabled so that acpi events are logged"
  fi
  
  out=$(grep "^MODULES=" /etc/default/acpid | cut -d "=" -f2 | grep -i "all" | wc -l)
  if [[ ${out} -eq 0 ]]; then
    addwarn "ACPID all module loading not enabled in /etc/default/acpid"
    addwarn "this should be enabled to ensure that API shutdown,reboot and restart to work"
  fi

  # check for logging when API power button press happens
  if [ ! -f /etc/acpi/events/powerbtn-acpi-support ]; then
      addwarn "ACPID powerbutton pressed file not found"
      addwarn "Need to have this for API shutdown,reboot and restart to work"
  else 
    out=$(grep "^action=/lib/smartdc/debian-powerbtn-acpi-support.sh$" /etc/acpi/events/powerbtn-acpi-support | wc -l)
    if [[ ${out} -eq 0 ]]; then
      addwarn "ACPID powerbutton pressed not configured for Joyent API in /etc/acpi/events/powerbtn-acpi-support"
    fi
  fi 

  # update grub
  local updategrub=$(which update-grub 2>/dev/null)
  out=$($updategrub 2>/dev/null)
  lib_smartdc_info "update all available kernels in GRUB"
  if [ ! -z ${out} ]; then
    addwarn "$updategrub returned and error. Run manually to ensure that a kernel is loaded."
  fi

  # check for proper Joyent linux repo configured in apt
  vendor=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
  distname=$(grep -w linux_distro_name $JOYENT_VERSION_FILE | cut -d: -f2 | tr -d ' ' | tr -d '\n' 2> /dev/null)
  out=$(grep "^deb ${JOYENT_REPO_URL}/${vendor}/${distname} /$" /etc/apt/sources.list.d/joyent-linux-repo.sources.list | wc -l)
  if [[ ${out} -eq 0 ]]; then
    addwarn "Joyent Linux Repo server ( ${JOYENT_REPO_URL}/${vendor}/${distname} ) not configured in /etc/apt/sources.list.d/joyent-linux-repo.sources.list"
  fi

  # make sure dhcpclient called Joyent script to set hostname
  out=$(grep "/lib/smartdc/set-hostname" /sbin/dhclient-script | wc -l )
  if [[ ${out} -eq 0 ]]; then
    addwarn "DHCP client not configured to call /lib/smartdc/set-hostname"
    addwarn "Hostnames will not be set properly"
  fi

  # make sure that link is in place for /etc/update-motd.d/99-joyent-footer
  if [ ! -L /etc/update-motd.d/99-joyent-footer ]; then
    addwarn "/etc/update-motd.d/99-joyent-footer is not a sym link - this should be to enable Joyent MOTD"
  fi

  # make sure that ntpd is configured to listen
  out=$(grep "^interface listen ipv4$" /etc/ntp.conf | wc -l)
  if [[ ${out} -eq 0 ]]; then
    addwarn "NTPD not configured to listen to IPv4 interface in /etc/ntp.conf"
    addwarn "add 'interface listen ipv4' /etc/ntp.conf"
  fi

  out=$(ntpq -pn | grep -E "\.INIT\.(.*)(0.000)(.*)(0.000)(.*)(0.000)" | wc -l)
  if [[ ${out} -gt 3 ]]; then
    addwarn "NTPD seems has more than 3 time server failures"
    addwarn "run 'ntpq -pn' to verify that time servers are updating NTPD"
  fi
  
}

# specific fixes for ubuntu
ubuntu_fixes() {
# removes unused kernels from apt database
  UNUSED_KERNELS=$(dpkg --get-selections | grep joyent | grep linux | grep -v `uname -r`)

  for f in $UNUSED_KERNELS
  do
    if [ $f != 'install' ]; then
      echo -n "Purging unused kernel $f (Y\n)" 
      read REPLY
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        out=$(apt-get -y purge $f)
        echo "   - $out"
      else
        echo " "
      fi
    fi
  done
}

# makes sure that all is in /lib/smartdc and configured for production
check_lib_smartdc() {

  # Make sure debugging is off on all scripts
  for OUT in `grep -e "^DEBUG=" /lib/smartdc/*`; do
    FILENAME=`echo $OUT | cut -d ':' -f 1`
    DEBUG_LEVEL=`echo $OUT | cut -d '=' -f 2`
    if [ $DEBUG_LEVEL -gt 0 ]; then
       addwarn "Debug level is set to $DEBUG_LEVEL in $FILENAME"
    fi
  done

  # Make sure zeroing disk is enabled 
    if [ $NO_ZERO_DISK -gt 0 ]; then
       addwarn "Disk Zeroing is disabled in prepare-image script - it should have NO_ZERO_DISK=0"
    fi

  # Check that all files are in /lib/smartdc
  # this is updaed as files change locations
  FILELIST='debian-powerbtn-acpi-support.sh disable-iptables format-secondary-disk get-motd joyent_dataset_changelog joyent_linux_repo_gpg_key joyent_motd_footer joyent_product_info joyent_rc.local joyent_version lib_smartdc_scripts.cfg mdata-get prepare-image remove_unused_kernels run-user-script send-arp-updates set-hostname set-root-authorized-keys'
  for FILE in $FILELIST; do
     if [ ! -f "/lib/smartdc/$FILE" ]; then
        lib_smartdc_fatal "Missing needed file - /lib/smartdc/$FILE"   
     fi
  done

  # Check for symlinks in /etc
  LINKLIST='joyent_dataset_changelog joyent_version product'
    for LINK in $LINKLIST; do
     if [ ! -L "/etc/$LINK" ]; then
        lib_smartdc_fatal "Missing sym link - /etc/$LINK"   
     fi
  done

  # Make sure that call in /etc/rc.local to /lib/smartdc/joyent_rc.local
  OUT=`grep -e "^(/lib/smartdc/joyent_rc.local)" /etc/rc.local`
  if [ -z $OUT ]; then
     lib_smartdc_fatal "Missing call in /etc/rc.local to /lib/smartdc/joyent_rc.local"
  fi
}

## MAIN ##

# Make sure user is root
lib_smartdc_check_root

separator
read -p "This script will delete and change lots of stuff. This is not meant to be ran on a production system. Are you sure you want to do this? " -n 1
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo  " "
    echo  " "
    lib_smartdc_fatal "User selected not to run script"
fi
echo  " "
echo  " "

separator
printf "Prepare-image\n"
separator

# subs that get ran on specific versions of Linux
which lsb_release >/dev/null 2>&1 || lib_smartdc_info "ERROR: lsb_release not found"

case `uname -s | tr '[:upper:]' '[:lower:]'` in
  linux)
    vendor=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
    if [[ ${vendor} == "debian" ]] ; then
      prepare_debian
    elif [[ ${vendor} == "redhat" ]] ; then
      prepare_redhat
    elif [[ ${vendor} == "fedora" ]] ; then
      prepare_redhat
    elif [[ ${vendor} == "centos" ]] ; then
      prepare_redhat
    elif [[ ${vendor} == "ubuntu" ]] ; then
      ubuntu_fixes
      prepare_debian
    fi

    # run on all versions of linux
    check_lib_smartdc
    cleanup_logs
    cleanup_lock_files
    cleanup_disks
    zero_disks
    cleanup_ssh
    cleanup_root
    cleanup_other_users
    check_kernel_data
    cleanup_metadata
    cleanup_hostname
    ;;
  *)
    lib_smartdc_fatal "OS ( $vendor ) specific features not implemented"
    ;;
esac

if [[ ${WARNING} != "" ]] ; then
  printf "\n"
  separator
  printf "${WARNING}"
  separator
  printf "\n\n"
  exit 1
else
  printf "\n"
  separator
  printf "(info) you may now snapshot your machine\n"
  separator
  printf "\n\n"
  exit 0
fi
